import os
import logging
import threading
from datetime import datetime
from flask import Flask
import telebot
from telebot import types
import requests

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv('API_TOKEN')
bot = telebot.TeleBot(API_TOKEN)

user_data = {}
analytics_data = {
    'started_calculations': 0,
    'completed_calculations': 0,
    'abandoned_steps': {}
}

EMOJI = {
    'foundation': 'üèóÔ∏è',
    'roof': 'üèõÔ∏è',
    'insulation': '‚ùÑÔ∏è',
    'exterior': 'üé®',
    'interior': 'üõãÔ∏è',
    'windows': 'ü™ü',
    'doors': 'üö™',
    'terrace': 'üå≥',
    'region': 'üìç'
}

COSTS = {
    'materials': {
        'foundation': {
            '–°–≤–∞–π–Ω–æ-–≤–∏–Ω—Ç–æ–≤–æ–π': 15000,
            '–õ–µ–Ω—Ç–æ—á–Ω—ã–π': 20000,
            '–ü–ª–∏—Ç–Ω—ã–π': 25000
        },
        'roof': {
            '–ú–µ—Ç–∞–ª–ª–æ—á–µ—Ä–µ–ø–∏—Ü–∞': 1200,
            '–ú—è–≥–∫–∞—è –∫—Ä–æ–≤–ª—è': 800,
            '–§–∞–ª—å—Ü–µ–≤–∞—è –∫—Ä–æ–≤–ª—è': 1800,
            '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å': 0
        },
        'insulation': {
            '–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–∞—Ç–∞': {'price': 500, 'min_thickness': 150},
            '–≠–∫–æ–≤–∞—Ç–∞': {'price': 400, 'min_thickness': 200},
            '–ü–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª': {'price': 600, 'min_thickness': 100},
            '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å': 0
        },
        'exterior': {
            '–°–∞–π–¥–∏–Ω–≥': 300,
            '–í–∞–≥–æ–Ω–∫–∞': 400,
            '–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞': 250,
            '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å': 0
        },
        'interior': {
            '–í–∞–≥–æ–Ω–∫–∞': 350,
            '–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω': 300,
            '–î—Ä—É–≥–æ–µ': 0,
            '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å': 0
        },
        'windows': 5000,
        'doors': {
            '–≤—Ö–æ–¥–Ω–∞—è': 15000,
            '–º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω–∞—è': 8000
        }
    },
    'work': {
        'base': {
            'price': 8000,
            'floor_multiplier': {
                '–û–¥–Ω–æ—ç—Ç–∞–∂–Ω—ã–π': 1.0,
                '–î–≤—É—Ö—ç—Ç–∞–∂–Ω—ã–π': 0.9,
                '–° –º–∞–Ω—Å–∞—Ä–¥–æ–π': 1.2
            }
        },
        'terrace': 3000,
        'basement': 1500
    }
}

REGIONAL_COEFFICIENTS = {
    '–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª': 1,
    '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª': 1.2,
    '–î—Ä—É–≥–æ–π': 1.5
}

QUESTIONS = [
    {
        'text': 'üìç –†–µ–≥–∏–æ–Ω —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞:',
        'options': ['–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª', '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª', '–î—Ä—É–≥–æ–π'],
        'key': 'region',
        'row_width': 2
    },
    {
        'text': 'üè° –ü–ª–æ—â–∞–¥—å –¥–æ–º–∞ (–∫–≤.–º):',
        'options': ['100', '120', '150', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'area',
        'max': 1000,
        'row_width': 2
    },
    {
        'text': '–≠—Ç–∞–∂–Ω–æ—Å—Ç—å üè†:',
        'options': ['–û–¥–Ω–æ—ç—Ç–∞–∂–Ω—ã–π', '–î–≤—É—Ö—ç—Ç–∞–∂–Ω—ã–π', '–° –º–∞–Ω—Å–∞—Ä–¥–æ–π', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'floors',
        'row_width': 2
    },
    {
        'text': '–§—É–Ω–¥–∞–º–µ–Ω—Ç üèóÔ∏è:',
        'options': ['–°–≤–∞–π–Ω–æ-–≤–∏–Ω—Ç–æ–≤–æ–π', '–õ–µ–Ω—Ç–æ—á–Ω—ã–π', '–ü–ª–∏—Ç–Ω—ã–π', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'foundation',
        'row_width': 2
    },
    {
        'text': '–ö—Ä–æ–≤–ª—è:',
        'options': ['–ú–µ—Ç–∞–ª–ª–æ—á–µ—Ä–µ–ø–∏—Ü–∞', '–ú—è–≥–∫–∞—è –∫—Ä–æ–≤–ª—è', '–§–∞–ª—å—Ü–µ–≤–∞—è –∫—Ä–æ–≤–ª—è', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'roof',
        'row_width': 2
    },
    {
        'text': '–£—Ç–µ–ø–ª–∏—Ç–µ–ª—å ‚ùÑÔ∏è:',
        'options': ['–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–∞—Ç–∞', '–≠–∫–æ–≤–∞—Ç–∞', '–ü–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'insulation',
        'row_width': 2
    },
    {
        'text': '–¢–æ–ª—â–∏–Ω–∞ —É—Ç–µ–ø–ª–∏—Ç–µ–ª—è (–º–º) üìè:',
        'options': ['100', '150', '200'],
        'key': 'insulation_thickness',
        'row_width': 3
    },
    {
        'text': '–í–Ω–µ—à–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ üé®:',
        'options': ['–°–∞–π–¥–∏–Ω–≥', '–í–∞–≥–æ–Ω–∫–∞', '–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'exterior',
        'row_width': 2
    },
    {
        'text': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ üõãÔ∏è:',
        'options': ['–í–∞–≥–æ–Ω–∫–∞', '–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω', '–î—Ä—É–≥–æ–µ', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'interior',
        'row_width': 2
    },
    {
        'text': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω ü™ü:',
        'options': ['1', '2', '3', '4', '5', '6'],
        'key': 'windows_count',
        'row_width': 3
    },
    {
        'text': '–í—Ö–æ–¥–Ω—ã–µ –¥–≤–µ—Ä–∏ üö™:',
        'options': ['1', '2', '3', '4', '5', '6'],
        'key': 'entrance_doors',
        'row_width': 3
    },
    {
        'text': '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏ üö™:',
        'options': ['1', '2', '3', '4', '5', '6'],
        'key': 'inner_doors',
        'row_width': 3
    },
    {
        'text': '–¢–µ—Ä—Ä–∞—Å–∞/–±–∞–ª–∫–æ–Ω (–∫–≤.–º) üå≥:',
        'options': ['0', '10', '20', '30', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'terrace_area',
        'row_width': 2
    }
]

TOTAL_STEPS = len(QUESTIONS)

def get_user_data(user_id):
    if user_id not in user_data:
        user_data[user_id] = {
            'projects': {},
            'current_project': None,
            'last_active': datetime.now(),
            'reminders': []
        }
    return user_data[user_id]

GUIDES = {
    'foundation': {
        'title': 'üèóÔ∏è –í—ã–±–æ—Ä —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞',
        'content': '''
üîç <b>–ü–æ–¥—Ä–æ–±–Ω—ã–π –≥–∞–π–¥ –ø–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–º:</b>

1. <u>–°–≤–∞–π–Ω–æ-–≤–∏–Ω—Ç–æ–≤–æ–π</u>
   - –°—Ç–æ–∏–º–æ—Å—Ç—å: 15 000-20 000 —Ä—É–±/–º¬≤
   - –°—Ä–æ–∫ –º–æ–Ω—Ç–∞–∂–∞: 2-3 –¥–Ω—è
   - –ì—Ä—É–Ω—Ç—ã: –±–æ–ª–æ—Ç–∏—Å—Ç—ã–µ, –ø—É—á–∏–Ω–∏—Å—Ç—ã–µ
   - –ü–ª—é—Å—ã: –±—ã—Å—Ç—Ä—ã–π –º–æ–Ω—Ç–∞–∂, –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞
   - –ú–∏–Ω—É—Å—ã: —Ç—Ä–µ–±—É–µ—Ç –∞–Ω—Ç–∏–∫–æ—Ä—Ä–æ–∑–∏–π–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

2. <u>–õ–µ–Ω—Ç–æ—á–Ω—ã–π</u>
   - –°—Ç–æ–∏–º–æ—Å—Ç—å: 20 000-25 000 —Ä—É–±/–º¬≤
   - –°—Ä–æ–∫ –º–æ–Ω—Ç–∞–∂–∞: 14-21 –¥–µ–Ω—å
   - –ì—Ä—É–Ω—Ç—ã: —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ, –ø–µ—Å—á–∞–Ω—ã–µ
   - –ü–ª—é—Å—ã: –≤—ã—Å–æ–∫–∞—è –Ω–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
   - –ú–∏–Ω—É—Å—ã: —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —É—Å–∞–¥–∫—É

üí° <b>–°–æ–≤–µ—Ç—ã –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤:</b>
‚úÖ –í—Å–µ–≥–¥–∞ –¥–µ–ª–∞–π—Ç–µ –≥–µ–æ–ª–æ–≥–∏—é –≥—Ä—É–Ω—Ç–∞
‚ùå –ù–µ —ç–∫–æ–Ω–æ–º—å—Ç–µ –Ω–∞ –≥–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏–∏
üìÜ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω –º–æ–Ω—Ç–∞–∂–∞: –ª–µ—Ç–æ-–æ—Å–µ–Ω—å
'''
    },
    'walls': {
        'title': 'üß± –ö–∞—Ä–∫–∞—Å –∏ —Å—Ç–µ–Ω—ã',
        'content': '''
üîç <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞:</b>

1. <u>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞</u>
   - –¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω: 200-250 –º–º
   - –£—Ç–µ–ø–ª–∏—Ç–µ–ª—å: –±–∞–∑–∞–ª—å—Ç–æ–≤–∞—è –≤–∞—Ç–∞
   - –û–±—à–∏–≤–∫–∞: OSB-3 12 –º–º
   - –ü–∞—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞

2. <u>–î–≤–æ–π–Ω–æ–π –∫–∞—Ä–∫–∞—Å</u>
   - –¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω: 300-400 –º–º
   - –ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω–æ–µ —É—Ç–µ–ø–ª–µ–Ω–∏–µ
   - –®—É–º–æ–∏–∑–æ–ª—è—Ü–∏—è: 20-30 –¥–ë

üìê <b>–†–∞—Å—á–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:</b>
- –°—Ç–æ–π–∫–∏: 50x150 –º–º —Å —à–∞–≥–æ–º 600 –º–º
- –û–±–≤—è–∑–∫–∏: –¥–≤–æ–π–Ω–∞—è –¥–æ—Å–∫–∞ 50x200 –º–º
- –ö—Ä–µ–ø–µ–∂: –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–µ —É–≥–æ–ª–∫–∏
'''
    },
    'roof': {
        'title': 'üèõÔ∏è –ö—Ä–æ–≤–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã',
        'content': '''
üîç <b>–¢–∏–ø—ã –∫—Ä–æ–≤–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º:</b>

1. <u>–•–æ–ª–æ–¥–Ω–∞—è –∫—Ä–æ–≤–ª—è</u>
   - –£–∫–ª–æ–Ω: 25-45¬∞
   - –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è: –ø—Ä–æ–¥—É—Ö–∏ + –∫–æ–Ω—å–∫–æ–≤—ã–π –∞—ç—Ä–∞—Ç–æ—Ä
   - –°—Ä–æ–∫ —Å–ª—É–∂–±—ã: 25-50 –ª–µ—Ç

2. <u>–¢–µ–ø–ª–∞—è –∫—Ä–æ–≤–ª—è</u>
   - –£—Ç–µ–ø–ª–∏—Ç–µ–ª—å: 250-300 –º–º
   - –ü–∞—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è: —Ñ–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–µ–º–±—Ä–∞–Ω–∞
   - –ö–æ–Ω—Ç—Ä–æ–±—Ä–µ—à–µ—Ç–∫–∞: 50 –º–º –∑–∞–∑–æ—Ä

‚ö° <b>–í–∞–∂–Ω–æ:</b>
- –†–∞—Å—á–µ—Ç —Å–Ω–µ–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–æ –°–ü 20.13330
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ—Ç—Ä–æ–∑–∞—â–∏—Ç–Ω—ã–µ –ø–ª–∞–Ω–∫–∏
- –ú–æ–Ω—Ç–∞–∂ –µ–Ω–¥–æ–≤—ã —Å –¥–≤–æ–π–Ω—ã–º —Å–ª–æ–µ–º –≥–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏–∏
'''
    }
}

def create_keyboard(items, row_width, skip_button=False):
    markup = types.ReplyKeyboardMarkup(row_width=row_width, resize_keyboard=True)
    filtered = [item for item in items if item != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']
    
    for i in range(0, len(filtered), row_width):
        markup.add(*filtered[i:i+row_width])
    
    if skip_button:
        markup.add('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
    markup.add('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç')
    return markup

def schedule_reminder(user_id, project_name):
    def send_reminder():
        bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–µ–∫—Ç–µ '{project_name}'. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å—á–µ—Ç? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu")
    
    timer = threading.Timer(3600, send_reminder)
    user = get_user_data(user_id)
    user['reminders'].append(timer)
    timer.start()

def track_event(event_type, step=None):
    if event_type == 'start':
        analytics_data['started_calculations'] += 1
    elif event_type == 'complete':
        analytics_data['completed_calculations'] += 1
    elif event_type == 'abandon':
        analytics_data['abandoned_steps'][step] = analytics_data['abandoned_steps'].get(step, 0) + 1

def create_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = ["üè† –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", "üìö –ì–∞–π–¥—ã", 
              "üìä –ò—Å—Ç–æ—Ä–∏—è", "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    markup.add(*buttons)
    return markup

@bot.message_handler(commands=['start', 'menu'])
def show_main_menu(message):
    user_id = message.chat.id
    user = get_user_data(user_id)
    user['last_active'] = datetime.now()
    bot.send_message(user_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())

@bot.message_handler(func=lambda m: m.text == "üè† –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
def start_new_project(message):
    user_id = message.chat.id
    user = get_user_data(user_id)
    project_id = f"project_{datetime.now().strftime('%Y%m%d%H%M%S')}"
    
    user['projects'][project_id] = {
        'name': f"–ü—Ä–æ–µ–∫—Ç –æ—Ç {datetime.now().strftime('%d.%m.%Y')}",
        'data': {},
        'created_at': datetime.now(),
        'completed': False
    }
    user['current_project'] = project_id
    track_event('start')
    ask_next_question(user_id)

def ask_next_question(user_id):
    user = get_user_data(user_id)
    project = user['projects'][user['current_project']]
    current_step = project['data'].get('step', 0)
    
    if current_step >= TOTAL_STEPS:
        calculate_and_send_result(user_id)
        return
    
    question = QUESTIONS[current_step]
    text = question['text']
    row_width = question.get('row_width', 2)
    skip_button = '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' in question['options']
    
    progress = f"–®–∞–≥ {current_step + 1} –∏–∑ {TOTAL_STEPS}\n{text}"
    markup = create_keyboard(question['options'], row_width, skip_button)
    
    bot.send_message(user_id, progress, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(user_id, process_answer, current_step=current_step)

def process_answer(message, current_step):
    user_id = message.chat.id
    user = get_user_data(user_id)
    project = user['projects'][user['current_project']]
    question = QUESTIONS[current_step]
    
    try:
        answer = message.text.strip()
        
        if answer == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç":
            del user['projects'][user['current_project']]
            user['current_project'] = None
            show_main_menu(message)
            return

        if answer == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            project['data'][question['key']] = None
        else:
            if question['key'] in ['windows_count', 'entrance_doors', 'inner_doors']:
                project['data'][question['key']] = int(answer)
            elif question['key'] in ['area', 'terrace_area']:
                project['data'][question['key']] = float(answer)
            else:
                project['data'][question['key']] = answer
        
        project['data']['step'] = current_step + 1
        user['last_active'] = datetime.now()
        
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        track_event('abandon', current_step)
        return ask_next_question(user_id)
    
    ask_next_question(user_id)

def calculate_roof_area(data):
    area = float(data.get('area', 100))
    floors = data.get('floors', '–û–¥–Ω–æ—ç—Ç–∞–∂–Ω—ã–π')
    
    if floors == '–î–≤—É—Ö—ç—Ç–∞–∂–Ω—ã–π':
        return area * 0.6
    elif floors == '–° –º–∞–Ω—Å–∞—Ä–¥–æ–π':
        return area * 1.1
    return area * 0.8

def calculate_cost(data):
    total = 0
    details = []
    
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
        floor_type = data.get('floors', '–û–¥–Ω–æ—ç—Ç–∞–∂–Ω—ã–π')
        base_price = COSTS['work']['base']['price']
        multiplier = COSTS['work']['base']['floor_multiplier'][floor_type]
        area = float(data.get('area', 100))
        base_cost = area * base_price * multiplier
        total += base_cost
        details.append(f"–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã ({floor_type}): {base_cost:,.0f}‚ÇΩ")

        # –§—É–Ω–¥–∞–º–µ–Ω—Ç
        foundation_type = data.get('foundation')
        if foundation_type and foundation_type != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            foundation_cost = COSTS['materials']['foundation'].get(foundation_type, 0)
            total += foundation_cost
            details.append(f"–§—É–Ω–¥–∞–º–µ–Ω—Ç ({foundation_type}): {foundation_cost:,.0f}‚ÇΩ")

        # –ö—Ä–æ–≤–ª—è
        roof_type = data.get('roof')
        if roof_type and roof_type != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            roof_area = calculate_roof_area(data)
            roof_cost = roof_area * COSTS['materials']['roof'].get(roof_type, 0)
            total += roof_cost
            details.append(f"–ö—Ä–æ–≤–ª—è ({roof_type}): {roof_cost:,.0f}‚ÇΩ")

        # –£—Ç–µ–ø–ª–∏—Ç–µ–ª—å
        insulation_type = data.get('insulation')
        if insulation_type and insulation_type != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            thickness = float(data.get('insulation_thickness', 150))
            material = COSTS['materials']['insulation'][insulation_type]
            insulation_cost = (thickness / 100) * area * material['price']
            total += insulation_cost
            details.append(f"–£—Ç–µ–ø–ª–∏—Ç–µ–ª—å ({insulation_type} {thickness}–º–º): {insulation_cost:,.0f}‚ÇΩ")

        # –í–Ω–µ—à–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞
        exterior_type = data.get('exterior')
        if exterior_type and exterior_type != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            exterior_cost = area * COSTS['materials']['exterior'].get(exterior_type, 0)
            total += exterior_cost
            details.append(f"–í–Ω–µ—à–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ ({exterior_type}): {exterior_cost:,.0f}‚ÇΩ")

        # –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞
        interior_type = data.get('interior')
        if interior_type and interior_type != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            interior_cost = area * COSTS['materials']['interior'].get(interior_type, 0)
            total += interior_cost
            details.append(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ ({interior_type}): {interior_cost:,.0f}‚ÇΩ")

        # –û–∫–Ω–∞ –∏ –¥–≤–µ—Ä–∏
        windows_count = int(data.get('windows_count', 0))
        entrance_doors = int(data.get('entrance_doors', 0))
        inner_doors = int(data.get('inner_doors', 0))
        
        windows_cost = windows_count * COSTS['materials']['windows']
        entrance_doors_cost = entrance_doors * COSTS['materials']['doors']['–≤—Ö–æ–¥–Ω–∞—è']
        inner_doors_cost = inner_doors * COSTS['materials']['doors']['–º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω–∞—è']
        doors_windows_total = windows_cost + entrance_doors_cost + inner_doors_cost
        total += doors_windows_total
        details.append(f"–û–∫–Ω–∞/–¥–≤–µ—Ä–∏: {doors_windows_total:,.0f}‚ÇΩ")

        # –¢–µ—Ä—Ä–∞—Å–∞
        terrace_area = float(data.get('terrace_area', 0))
        terrace_cost = terrace_area * COSTS['work']['terrace']
        total += terrace_cost
        if terrace_area > 0:
            details.append(f"–¢–µ—Ä—Ä–∞—Å–∞: {terrace_cost:,.0f}‚ÇΩ")

        # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        region = data.get('region', '–î—Ä—É–≥–æ–π')
        regional_coeff = REGIONAL_COEFFICIENTS.get(region, 1.0)
        total *= regional_coeff
        details.append(f"–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç ({region}): x{regional_coeff}")

        # –°–∫–∏–¥–∫–∏
        selected_items = sum(1 for k in data if data.get(k) and k not in ['area', 'floors', 'region'])
        if selected_items > 5:
            total *= 0.9
            details.append("–°–∫–∏–¥–∫–∞ –∑–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∑–∞–∫–∞–∑: 10%")
        
        if area > 200:
            total *= 0.95
            details.append("–°–∫–∏–¥–∫–∞ –∑–∞ –±–æ–ª—å—à—É—é –ø–ª–æ—â–∞–¥—å: 5%")

    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}")
    
    return round(total, 2), details

def calculate_and_send_result(user_id):
    try:
        user = get_user_data(user_id)
        project_id = user['current_project']
        project = user['projects'][project_id]
        total, details = calculate_cost(project['data'])
        
        project['report'] = {
            'details': details,
            'total': total,
            'timestamp': datetime.now().strftime("%d.%m.%Y %H:%M")
        }
        project['completed'] = True
        project['total_cost'] = total
        track_event('complete')
        
        result = [
            "üìä –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:",
            *details,
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
            f"üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total:,.0f} —Ä—É–±."
        ]
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        markup.add("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        bot.send_message(user_id, "\n".join(result), reply_markup=markup)
        schedule_reminder(user_id, project['name'])
        
    except Exception as e:
        bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        track_event('abandon', project['data'].get('step', 0))
    finally:
        user['current_project'] = None

@bot.message_handler(func=lambda m: m.text == "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞")
def send_detailed_calculation(message):
    user_id = message.chat.id
    user = get_user_data(user_id)
    
    if not user.get('current_project') and user['projects']:
        project_id = max(user['projects'], key=lambda x: user['projects'][x]['created_at'])
    else:
        project_id = user['current_project']
    
    project = user['projects'].get(project_id)
    
    if not project or not project.get('report'):
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if not project.get('completed'):
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–µ–∫—Ç –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return
    
    report = project['report']
    result = [
        f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—á–µ—Ç –æ—Ç @{message.from_user.username}",
        "üìä –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç:",
        *report['details'],
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
        f"üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {report['total']:,.0f} —Ä—É–±."
    ]
    
    try:
        bot.send_message(515650034, "\n".join(result))
        bot.send_message(user_id, "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É!")
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
    
    show_main_menu(message)

@bot.message_handler(func=lambda m: m.text == "üìö –ì–∞–π–¥—ã")
def show_guide_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [g['title'] for g in GUIDES.values()]
    markup.add(*buttons)
    markup.add("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≥–∞–π–¥–∞:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in [g['title'] for g in GUIDES.values()])
def show_guide_content(message):
    guide_title = message.text
    for key, guide in GUIDES.items():
        if guide['title'] == guide_title:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("üîô –ö —Å–ø–∏—Å–∫—É –≥–∞–π–¥–æ–≤")
            bot.send_message(
                message.chat.id, 
                f"üìñ <b>{guide['title']}</b>\n\n{guide['content']}", 
                parse_mode='HTML', 
                reply_markup=markup
            )
            break

@bot.message_handler(func=lambda m: m.text == "üîô –ö —Å–ø–∏—Å–∫—É –≥–∞–π–¥–æ–≤")
def back_to_guides(message):
    show_guide_menu(message)

@bot.message_handler(func=lambda m: m.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def handle_settings(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
def clear_history(message):
    user_id = message.chat.id
    user = get_user_data(user_id)
    user['projects'] = {}
    bot.send_message(user_id, "‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")
    show_main_menu(message)

@bot.message_handler(func=lambda m: m.text == "üìä –ò—Å—Ç–æ—Ä–∏—è")
def show_history(message):
    user_id = message.chat.id
    user = get_user_data(user_id)
    
    if not user['projects']:
        bot.send_message(user_id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
        return
    
    response = ["üìã –í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:"]
    for pid, project in user['projects'].items():
        if project.get('report'):
            status = f"‚úÖ {project['report']['timestamp']}"
            response.append(f"{project['name']} - {status}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {project['report']['total']:,.0f} —Ä—É–±.")
    
    bot.send_message(user_id, "\n".join(response))

def self_ping():
    while True:
        try:
            requests.get("https://karkasmaster.onrender.com")
        except Exception as e:
            logging.error(f"Ping failed: {str(e)}")
        threading.Event().wait(300)

app = Flask(__name__)

@app.route('/')
def home():
    return "üè† Construction Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/analytics')
def show_analytics():
    completion_rate = analytics_data['completed_calculations'] / analytics_data['started_calculations'] * 100 if analytics_data['started_calculations'] > 0 else 0
    return f"""
    üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:
    –ù–∞—á–∞—Ç–æ —Ä–∞—Å—á–µ—Ç–æ–≤: {analytics_data['started_calculations']}
    –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {analytics_data['completed_calculations']} ({completion_rate:.1f}%)
    –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —à–∞–≥–∏: {analytics_data['abandoned_steps']}
    """

def start_bot():
    bot.polling(none_stop=True)

if __name__ == '__main__':
    threading.Thread(target=self_ping, daemon=True).start()
    
    bot_thread = threading.Thread(target=start_bot)
    bot_thread.daemon = True
    bot_thread.start()
    
    port = int(os.getenv('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
