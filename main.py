import os
import logging
import threading
from datetime import datetime, timedelta
from flask import Flask
import telebot
from telebot import types

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv('API_TOKEN')
bot = telebot.TeleBot(API_TOKEN)

user_data = {}
analytics_data = {
    'started_calculations': 0,
    'completed_calculations': 0,
    'abandoned_steps': {}
}

EMOJI = {
    'foundation': 'üèóÔ∏è',
    'roof': 'üèõÔ∏è',
    'insulation': '‚ùÑÔ∏è',
    'exterior': 'üé®',
    'interior': 'üõãÔ∏è',
    'windows': 'ü™ü',
    'doors': 'üö™',
    'terrace': 'üå≥',
    'region': 'üìç'
}

COSTS = {
    'materials': {
        'foundation': {
            '–°–≤–∞–π–Ω–æ-–≤–∏–Ω—Ç–æ–≤–æ–π': 15000,
            '–õ–µ–Ω—Ç–æ—á–Ω—ã–π': 20000,
            '–ü–ª–∏—Ç–Ω—ã–π': 25000
        },
        'roof': {
            '–ú–µ—Ç–∞–ª–ª–æ—á–µ—Ä–µ–ø–∏—Ü–∞': 1200,
            '–ú—è–≥–∫–∞—è –∫—Ä–æ–≤–ª—è': 800,
            '–§–∞–ª—å—Ü–µ–≤–∞—è –∫—Ä–æ–≤–ª—è': 1800,
            '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å': 0
        },
        'insulation': {
            '–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–∞—Ç–∞': {'price': 500, 'min_thickness': 150},
            '–≠–∫–æ–≤–∞—Ç–∞': {'price': 400, 'min_thickness': 200},
            '–ü–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª': {'price': 600, 'min_thickness': 100},
            '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å': 0
        },
        'exterior': {
            '–°–∞–π–¥–∏–Ω–≥': 300,
            '–í–∞–≥–æ–Ω–∫–∞': 400,
            '–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞': 250,
            '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å': 0
        },
        'interior': {
            '–í–∞–≥–æ–Ω–∫–∞': 350,
            '–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω': 300,
            '–î—Ä—É–≥–æ–µ': 0,
            '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å': 0
        },
        'windows': 5000,
        'doors': {
            '–≤—Ö–æ–¥–Ω–∞—è': 15000,
            '–º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω–∞—è': 8000
        }
    },
    'work': {
        'base': {
            'price': 8000,
            'floor_multiplier': {
                '–û–¥–Ω–æ—ç—Ç–∞–∂–Ω—ã–π': 1.0,
                '–î–≤—É—Ö—ç—Ç–∞–∂–Ω—ã–π': 0.9,
                '–° –º–∞–Ω—Å–∞—Ä–¥–æ–π': 1.2
            }
        },
        'terrace': 3000,
        'basement': 1500
    }
}

REGIONAL_COEFFICIENTS = {
    '–ú–æ—Å–∫–≤–∞': 1.5,
    '–°–ü–±': 1.3,
    '–î—Ä—É–≥–æ–π': 1.0
}

QUESTIONS = [
    {
        'text': 'üìç –†–µ–≥–∏–æ–Ω —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞:',
        'options': ['–ú–æ—Å–∫–≤–∞', '–°–ü–±', '–î—Ä—É–≥–æ–π'],
        'key': 'region'
    },
    {
        'text': 'üè° –ü–ª–æ—â–∞–¥—å –¥–æ–º–∞ (–∫–≤.–º):',
        'options': ['100', '120', '150', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'area',
        'max': 1000
    },
    {
        'text': '–≠—Ç–∞–∂–Ω–æ—Å—Ç—å üè†:',
        'options': ['–û–¥–Ω–æ—ç—Ç–∞–∂–Ω—ã–π', '–î–≤—É—Ö—ç—Ç–∞–∂–Ω—ã–π', '–° –º–∞–Ω—Å–∞—Ä–¥–æ–π', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'floors'
    },
    {
        'text': '–§—É–Ω–¥–∞–º–µ–Ω—Ç üèóÔ∏è:',
        'options': ['–°–≤–∞–π–Ω–æ-–≤–∏–Ω—Ç–æ–≤–æ–π', '–õ–µ–Ω—Ç–æ—á–Ω—ã–π', '–ü–ª–∏—Ç–Ω—ã–π', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'foundation'
    },
    {
        'text': '–ö—Ä–æ–≤–ª—è:',
        'options': ['–ú–µ—Ç–∞–ª–ª–æ—á–µ—Ä–µ–ø–∏—Ü–∞', '–ú—è–≥–∫–∞—è –∫—Ä–æ–≤–ª—è', '–§–∞–ª—å—Ü–µ–≤–∞—è –∫—Ä–æ–≤–ª—è', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'roof'
    },
    {
        'text': '–£—Ç–µ–ø–ª–∏—Ç–µ–ª—å ‚ùÑÔ∏è:',
        'options': ['–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–∞—Ç–∞', '–≠–∫–æ–≤–∞—Ç–∞', '–ü–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'insulation'
    },
    {
        'text': '–¢–æ–ª—â–∏–Ω–∞ —É—Ç–µ–ø–ª–∏—Ç–µ–ª—è (–º–º) üìè:',
        'type': 'number',
        'key': 'insulation_thickness',
        'min': 50,
        'max': 500
    },
    {
        'text': '–í–Ω–µ—à–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ üé®:',
        'options': ['–°–∞–π–¥–∏–Ω–≥', '–í–∞–≥–æ–Ω–∫–∞', '–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'exterior'
    },
    {
        'text': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ üõãÔ∏è:',
        'options': ['–í–∞–≥–æ–Ω–∫–∞', '–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω', '–î—Ä—É–≥–æ–µ', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'interior'
    },
    {
        'text': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω ü™ü:',
        'type': 'number',
        'key': 'windows_count',
        'max': 50
    },
    {
        'text': '–í—Ö–æ–¥–Ω—ã–µ –¥–≤–µ—Ä–∏ üö™:',
        'type': 'number',
        'key': 'entrance_doors',
        'max': 10
    },
    {
        'text': '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏ üö™:',
        'type': 'number',
        'key': 'inner_doors',
        'max': 30
    },
    {
        'text': '–¢–µ—Ä—Ä–∞—Å–∞/–±–∞–ª–∫–æ–Ω (–∫–≤.–º) üå≥:',
        'type': 'number',
        'key': 'terrace_area',
        'max': 200
    }
]

TOTAL_STEPS = len(QUESTIONS)

# –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
def get_user_data(user_id):
    if user_id not in user_data:
        user_data[user_id] = {
            'projects': {},
            'current_project': None,
            'last_active': datetime.now(),
            'guide_progress': 0,
            'reminders': []
        }
    return user_data[user_id]

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥–∞–π–¥
GUIDES = [
    {"title": "–í—ã–±–æ—Ä —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞", "content": "–§—É–Ω–¥–∞–º–µ–Ω—Ç - –æ—Å–Ω–æ–≤–∞ –¥–æ–º–∞..."},
    {"title": "–¢–∏–ø—ã –∫—Ä–æ–≤–ª–∏", "content": "–ö—Ä–æ–≤–ª—è –∑–∞—â–∏—â–∞–µ—Ç –≤–∞—à –¥–æ–º..."},
    {"title": "–£—Ç–µ–ø–ª–µ–Ω–∏–µ –¥–æ–º–∞", "content": "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É—Ç–µ–ø–ª–µ–Ω–∏–µ..."}
]

# –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def schedule_reminder(user_id, project_name):
    def send_reminder():
        bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–µ–∫—Ç–µ '{project_name}'. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å—á–µ—Ç? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu")
    
    timer = threading.Timer(3600, send_reminder)
    user_data[user_id]['reminders'].append(timer)
    timer.start()

# –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
def track_event(event_type, step=None):
    if event_type == 'start':
        analytics_data['started_calculations'] += 1
    elif event_type == 'complete':
        analytics_data['completed_calculations'] += 1
    elif event_type == 'abandon':
        analytics_data['abandoned_steps'][step] = analytics_data['abandoned_steps'].get(step, 0) + 1

# –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def create_adaptive_markup(user_id):
    user = get_user_data(user_id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if user['current_project']:
        markup.add("‚ñ∂ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å—á–µ—Ç", "üìÅ –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
    else:
        markup.add("üè† –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
        
    markup.add("üìö –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –≥–∞–π–¥", "üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤")
    markup.add("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    return markup

@bot.message_handler(commands=['start', 'menu'])
def show_main_menu(message):
    user_id = message.chat.id
    user = get_user_data(user_id)
    user['last_active'] = datetime.now()
    
    bot.send_message(user_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_adaptive_markup(user_id))

@bot.message_handler(func=lambda m: m.text == "üè† –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
def start_new_project(message):
    user_id = message.chat.id
    user = get_user_data(user_id)
    project_id = f"project_{datetime.now().strftime('%Y%m%d%H%M%S')}"
    
    user['projects'][project_id] = {
        'name': f"–ü—Ä–æ–µ–∫—Ç –æ—Ç {datetime.now().strftime('%d.%m.%Y')}",
        'data': {},
        'created_at': datetime.now(),
        'completed': False
    }
    user['current_project'] = project_id
    track_event('start')
    ask_next_question(user_id)

def ask_next_question(user_id):
    user = get_user_data(user_id)
    project = user['projects'][user['current_project']]
    current_step = project['data'].get('step', 0)
    
    if current_step >= TOTAL_STEPS:
        calculate_and_send_result(user_id)
        return
    
    question = QUESTIONS[current_step]
    text = question['text']
    
    if current_step == 1:  # –®–∞–≥ —Å –ø–ª–æ—â–∞–¥—å—é
        text += "\n(–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç)"
    
    progress = f"–®–∞–≥ {current_step + 1} –∏–∑ {TOTAL_STEPS}\n{text}"
    
    if 'options' in question:
        emoji_char = EMOJI.get(question['key'], '')
        options = [opt for opt in question['options'] if opt != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        
        for opt in options:
            if current_step == 1 and opt != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                markup.add(f"{opt} –º¬≤")
            else:
                markup.add(f"{emoji_char} {opt}")
        markup.add("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    else:
        markup = types.ReplyKeyboardRemove()
    
    bot.send_message(user_id, progress, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(user_id, process_answer, current_step=current_step)

def process_answer(message, current_step):
    user_id = message.chat.id
    user = get_user_data(user_id)
    project = user['projects'][user['current_project']]
    question = QUESTIONS[current_step]
    
    try:
        answer = message.text.strip()
        
        if 'options' in question:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–æ—â–∞–¥–∏ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            if current_step == 1:
                clean_answer = answer.replace(' –º¬≤', '')
            else:
                emoji_char = EMOJI.get(question['key'], '')
                clean_answer = answer.replace(f"{emoji_char} ", "")
                
            clean_answer = clean_answer.strip()
            
            if clean_answer not in question['options'] and clean_answer != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–ª–æ—â–∞–¥–∏
            if current_step == 1 and clean_answer != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                project['data'][question['key']] = float(clean_answer)
            else:
                project['data'][question['key']] = clean_answer if clean_answer != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else None
            
        elif question.get('type') == 'number':
            value = float(answer)
            
            if 'min' in question and value < question['min']:
                raise ValueError(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {question['min']}")
                
            if 'max' in question and value > question['max']:
                raise ValueError(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {question['max']}")
                
            project['data'][question['key']] = value
            
        project['data']['step'] = current_step + 1
        user['last_active'] = datetime.now()
        
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        track_event('abandon', current_step)
        return ask_next_question(user_id)
    
    ask_next_question(user_id)

def calculate_roof_area(data):
    area = data.get('area', 100) or 100
    floors = data.get('floors', '–û–¥–Ω–æ—ç—Ç–∞–∂–Ω—ã–π')
    
    if floors == '–î–≤—É—Ö—ç—Ç–∞–∂–Ω—ã–π':
        return area * 0.6
    elif floors == '–° –º–∞–Ω—Å–∞—Ä–¥–æ–π':
        return area * 1.1
    return area * 0.8

def calculate_cost(data):
    total = 0
    details = []
    
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
        floor_type = data.get('floors', '–û–¥–Ω–æ—ç—Ç–∞–∂–Ω—ã–π')
        base_price = COSTS['work']['base']['price']
        multiplier = COSTS['work']['base']['floor_multiplier'].get(floor_type, 1.0)
        area = data.get('area', 100) or 100
        base_cost = area * base_price * multiplier
        total += base_cost
        details.append(f"–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã ({floor_type}): {base_cost:,.0f} —Ä—É–±.")
        
        # –§—É–Ω–¥–∞–º–µ–Ω—Ç
        foundation_type = data.get('foundation')
        if foundation_type and foundation_type != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            foundation_cost = COSTS['materials']['foundation'].get(foundation_type, 0)
            total += foundation_cost
            details.append(f"–§—É–Ω–¥–∞–º–µ–Ω—Ç ({foundation_type}): {foundation_cost:,.0f} —Ä—É–±.")
        
        # –ö—Ä–æ–≤–ª—è
        roof_type = data.get('roof')
        if roof_type and roof_type != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            roof_area = calculate_roof_area(data)
            roof_cost = roof_area * COSTS['materials']['roof'].get(roof_type, 0)
            total += roof_cost
            details.append(f"–ö—Ä–æ–≤–ª—è ({roof_type}): {roof_cost:,.0f} —Ä—É–±.")
        
        # –£—Ç–µ–ø–ª–∏—Ç–µ–ª—å
        insulation_type = data.get('insulation')
        if insulation_type and insulation_type != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            min_thickness = COSTS['materials']['insulation'][insulation_type]['min_thickness']
            actual_thickness = max(data.get('insulation_thickness', 0) or 0, min_thickness)
            insulation_cost = (actual_thickness / 100) * area * COSTS['materials']['insulation'][insulation_type]['price']
            total += insulation_cost
            details.append(f"–£—Ç–µ–ø–ª–∏—Ç–µ–ª—å ({insulation_type}): {insulation_cost:,.0f} —Ä—É–±.")
        
        # –í–Ω–µ—à–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞
        exterior_type = data.get('exterior')
        if exterior_type and exterior_type != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            exterior_cost = area * COSTS['materials']['exterior'].get(exterior_type, 0)
            total += exterior_cost
            details.append(f"–í–Ω–µ—à–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ ({exterior_type}): {exterior_cost:,.0f} —Ä—É–±.")
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞
        interior_type = data.get('interior')
        if interior_type and interior_type != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            interior_cost = area * COSTS['materials']['interior'].get(interior_type, 0)
            total += interior_cost
            details.append(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ ({interior_type}): {interior_cost:,.0f} —Ä—É–±.")
        
        # –û–∫–Ω–∞ –∏ –¥–≤–µ—Ä–∏
        windows_count = data.get('windows_count', 0) or 0
        entrance_doors = data.get('entrance_doors', 0) or 0
        inner_doors = data.get('inner_doors', 0) or 0
        
        windows_cost = windows_count * COSTS['materials']['windows']
        entrance_doors_cost = entrance_doors * COSTS['materials']['doors']['–≤—Ö–æ–¥–Ω–∞—è']
        inner_doors_cost = inner_doors * COSTS['materials']['doors']['–º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω–∞—è']
        doors_windows_total = windows_cost + entrance_doors_cost + inner_doors_cost
        total += doors_windows_total
        details.append(f"–û–∫–Ω–∞/–¥–≤–µ—Ä–∏: {doors_windows_total:,.0f} —Ä—É–±.")
        
        # –¢–µ—Ä—Ä–∞—Å–∞
        terrace_area = data.get('terrace_area', 0) or 0
        terrace_cost = terrace_area * COSTS['work']['terrace']
        total += terrace_cost
        if terrace_area > 0:
            details.append(f"–¢–µ—Ä—Ä–∞—Å–∞: {terrace_cost:,.0f} —Ä—É–±.")
        
        # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        region = data.get('region', '–î—Ä—É–≥–æ–π')
        regional_coeff = REGIONAL_COEFFICIENTS.get(region, 1.0)
        total *= regional_coeff
        details.append(f"–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç ({region}): x{regional_coeff}")
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–¥–æ–∫
        selected_items = sum(1 for k in data if data.get(k) and k not in ['area', 'floors', 'region'])
        if selected_items > 5:
            total *= 0.9
            details.append("–°–∫–∏–¥–∫–∞ –∑–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∑–∞–∫–∞–∑: 10%")
        
        if area > 200:
            total *= 0.95
            details.append("–°–∫–∏–¥–∫–∞ –∑–∞ –±–æ–ª—å—à—É—é –ø–ª–æ—â–∞–¥—å: 5%")
        
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}")
    
    return round(total, 2), details

def calculate_and_send_result(user_id):
    try:
        user = get_user_data(user_id)
        project = user['projects'][user['current_project']]
        total, details = calculate_cost(project['data'])
        
        project['completed'] = True
        project['total_cost'] = total
        track_event('complete')
        
        result = [
            "üìä –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:",
            *details,
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
            f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total:,.0f} —Ä—É–±."
        ]
        
        bot.send_message(user_id, "\n".join(result))
        schedule_reminder(user_id, project['name'])
        
    except Exception as e:
        bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        track_event('abandon', project['data'].get('step', 0))
    finally:
        if user_id in user_data:
            user['current_project'] = None

@bot.message_handler(func=lambda m: m.text == "üìö –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –≥–∞–π–¥")
def show_guide(message):
    user_id = message.chat.id
    user = get_user_data(user_id)
    guide = GUIDES[user['guide_progress']]
    
    markup = types.InlineKeyboardMarkup()
    if user['guide_progress'] < len(GUIDES) - 1:
        markup.add(types.InlineKeyboardButton("–î–∞–ª–µ–µ ‚û°", callback_data="next_guide"))
    markup.add(types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å ‚ùå", callback_data="close_guide"))
    
    bot.send_message(user_id, f"üìñ {guide['title']}\n\n{guide['content']}", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "next_guide")
def next_guide(call):
    user_id = call.message.chat.id
    user = get_user_data(user_id)
    user['guide_progress'] = (user['guide_progress'] + 1) % len(GUIDES)
    show_guide(call.message)

@bot.message_handler(func=lambda m: m.text == "üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤")
def show_history(message):
    user_id = message.chat.id
    user = get_user_data(user_id)
    
    if not user['projects']:
        bot.send_message(user_id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
        return
    
    response = ["üìã –í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:"]
    for pid, project in user['projects'].items():
        status = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω" if project['completed'] else "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
        response.append(f"{project['name']} - {status} - {project.get('total_cost', 0):,.0f} —Ä—É–±.")
    
    bot.send_message(user_id, "\n".join(response))

app = Flask(__name__)

@app.route('/')
def home():
    return "üè† Construction Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/analytics')
def show_analytics():
    completion_rate = analytics_data['completed_calculations'] / analytics_data['started_calculations'] * 100 if analytics_data['started_calculations'] > 0 else 0
    return f"""
    üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:
    –ù–∞—á–∞—Ç–æ —Ä–∞—Å—á–µ—Ç–æ–≤: {analytics_data['started_calculations']}
    –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {analytics_data['completed_calculations']} ({completion_rate:.1f}%)
    –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —à–∞–≥–∏: {analytics_data['abandoned_steps']}
    """

def start_bot():
    bot.polling(none_stop=True)

if __name__ == '__main__':
    bot_thread = threading.Thread(target=start_bot)
    bot_thread.daemon = True
    bot_thread.start()
    app.run(host='0.0.0.0', port=int(os.getenv('PORT', 5000)))