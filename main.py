import os
from flask import Flask
import telebot
from telebot import types
import logging
import threading

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv('API_TOKEN')
bot = telebot.TeleBot(API_TOKEN)

user_data = {}

EMOJI = {
    'foundation': 'üèóÔ∏è',
    'roof': 'üèõÔ∏è',
    'insulation': '‚ùÑÔ∏è',
    'exterior': 'üé®',
    'interior': 'üõãÔ∏è',
    'utilities': '‚ö°',
    'windows': 'ü™ü',
    'doors': 'üö™',
    'terrace': 'üå≥',
    'region': 'üìç'
}

COSTS = {
    'materials': {
        'foundation': {
            '–°–≤–∞–π–Ω–æ-–≤–∏–Ω—Ç–æ–≤–æ–π': 15000,
            '–õ–µ–Ω—Ç–æ—á–Ω—ã–π': 20000,
            '–ü–ª–∏—Ç–Ω—ã–π': 25000
        },
        'roof': {
            '–ú–µ—Ç–∞–ª–ª–æ—á–µ—Ä–µ–ø–∏—Ü–∞': 1200,
            '–ú—è–≥–∫–∞—è –∫—Ä–æ–≤–ª—è': 800,
            '–§–∞–ª—å—Ü–µ–≤–∞—è –∫—Ä–æ–≤–ª—è': 1800,
            '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å': 0
        },
        'insulation': {
            '–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–∞—Ç–∞': {'price': 500, 'min_thickness': 150},
            '–≠–∫–æ–≤–∞—Ç–∞': {'price': 400, 'min_thickness': 200},
            '–ü–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª': {'price': 600, 'min_thickness': 100},
            '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å': 0
        },
        'exterior': {
            '–°–∞–π–¥–∏–Ω–≥': 300,
            '–í–∞–≥–æ–Ω–∫–∞': 400,
            '–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞': 250,
            '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å': 0
        },
        'interior': {
            '–í–∞–≥–æ–Ω–∫–∞': 350,
            '–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω': 300,
            '–î—Ä—É–≥–æ–µ': 0,
            '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å': 0
        },
        'windows': 5000,
        'doors': {
            '–≤—Ö–æ–¥–Ω–∞—è': 15000,
            '–º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω–∞—è': 8000
        }
    },
    'work': {
        'base': {
            'price': 8000,
            'floor_multiplier': {
                '–û–¥–Ω–æ—ç—Ç–∞–∂–Ω—ã–π': 1.0,
                '–î–≤—É—Ö—ç—Ç–∞–∂–Ω—ã–π': 0.9,
                '–° –º–∞–Ω—Å–∞—Ä–¥–æ–π': 1.2
            }
        },
        'terrace': 3000,
        'basement': 1500
    }
}

REGIONAL_COEFFICIENTS = {
    '–ú–æ—Å–∫–≤–∞': 1.5,
    '–°–ü–±': 1.3,
    '–î—Ä—É–≥–æ–π': 1.0
}

QUESTIONS = [
    {
        'text': 'üìç –†–µ–≥–∏–æ–Ω —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞:',
        'options': ['–ú–æ—Å–∫–≤–∞', '–°–ü–±', '–î—Ä—É–≥–æ–π'],
        'key': 'region'
    },
    {
        'text': 'üè° –ü–ª–æ—â–∞–¥—å –¥–æ–º–∞ (–∫–≤.–º):',
        'options': ['100 –º¬≤', '120 –º¬≤', '150 –º¬≤', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'area',
        'max': 1000
    },
    {
        'text': '–≠—Ç–∞–∂–Ω–æ—Å—Ç—å üè†:',
        'options': ['–û–¥–Ω–æ—ç—Ç–∞–∂–Ω—ã–π', '–î–≤—É—Ö—ç—Ç–∞–∂–Ω—ã–π', '–° –º–∞–Ω—Å–∞—Ä–¥–æ–π', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'floors'
    },
    {
        'text': '–§—É–Ω–¥–∞–º–µ–Ω—Ç üèóÔ∏è:',
        'options': ['–°–≤–∞–π–Ω–æ-–≤–∏–Ω—Ç–æ–≤–æ–π', '–õ–µ–Ω—Ç–æ—á–Ω—ã–π', '–ü–ª–∏—Ç–Ω—ã–π', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'foundation'
    },
    {
        'text': '–ö—Ä–æ–≤–ª—è:',
        'options': ['–ú–µ—Ç–∞–ª–ª–æ—á–µ—Ä–µ–ø–∏—Ü–∞', '–ú—è–≥–∫–∞—è –∫—Ä–æ–≤–ª—è', '–§–∞–ª—å—Ü–µ–≤–∞—è –∫—Ä–æ–≤–ª—è', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'roof'
    },
    {
        'text': '–£—Ç–µ–ø–ª–∏—Ç–µ–ª—å ‚ùÑÔ∏è:',
        'options': ['–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–∞—Ç–∞', '–≠–∫–æ–≤–∞—Ç–∞', '–ü–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'insulation'
    },
    {
        'text': '–¢–æ–ª—â–∏–Ω–∞ —É—Ç–µ–ø–ª–∏—Ç–µ–ª—è (–º–º) üìè:',
        'type': 'number',
        'key': 'insulation_thickness',
        'min': 50,
        'max': 500
    },
    {
        'text': '–í–Ω–µ—à–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ üé®:',
        'options': ['–°–∞–π–¥–∏–Ω–≥', '–í–∞–≥–æ–Ω–∫–∞', '–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'exterior'
    },
    {
        'text': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ üõãÔ∏è:',
        'options': ['–í–∞–≥–æ–Ω–∫–∞', '–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω', '–î—Ä—É–≥–æ–µ', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'interior'
    },
    {
        'text': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω ü™ü:',
        'type': 'number',
        'key': 'windows_count',
        'max': 50
    },
    {
        'text': '–í—Ö–æ–¥–Ω—ã–µ –¥–≤–µ—Ä–∏ üö™:',
        'type': 'number',
        'key': 'entrance_doors',
        'max': 10
    },
    {
        'text': '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏ üö™:',
        'type': 'number',
        'key': 'inner_doors',
        'max': 30
    },
    {
        'text': '–¢–µ—Ä—Ä–∞—Å–∞/–±–∞–ª–∫–æ–Ω (–∫–≤.–º) üå≥:',
        'type': 'number',
        'key': 'terrace_area',
        'max': 200
    },
    {
        'text': '–ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏ ‚ö° (–≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ):',
        'options': ['–≠–ª–µ–∫—Ç—Ä–∏–∫–∞', '–í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ', '–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è', '–û—Ç–æ–ø–ª–µ–Ω–∏–µ', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'multiple': True,
        'key': 'utilities'
    }
]

TOTAL_STEPS = len(QUESTIONS)

def calculate_roof_area(data):
    area = data.get('area', 100)
    floors = data.get('floors', '–û–¥–Ω–æ—ç—Ç–∞–∂–Ω—ã–π')
    
    if floors == '–î–≤—É—Ö—ç—Ç–∞–∂–Ω—ã–π':
        return area * 0.6
    elif floors == '–° –º–∞–Ω—Å–∞—Ä–¥–æ–π':
        return area * 1.1
    return area * 0.8

def apply_discounts(total, data):
    selected_items = sum(1 for k in data if data.get(k) and k not in ['area', 'floors', 'region'])
    if selected_items > 5:
        total *= 0.9
    if data.get('area', 0) > 200:
        total *= 0.95
    return total

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    user_data[user_id] = {'step': 0}
    ask_next_question(user_id)

def ask_next_question(user_id):
    current_step = user_data[user_id].get('step', 0)
    if current_step >= TOTAL_STEPS:
        calculate_and_send_result(user_id)
        return
    
    question = QUESTIONS[current_step]
    text = question['text']
    progress = f"–®–∞–≥ {current_step + 1} –∏–∑ {TOTAL_STEPS}\n{text}"
    
    if 'options' in question:
        emoji_char = EMOJI.get(question['key'], '')
        options = [opt for opt in question['options'] if opt != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        
        for opt in options:
            markup.add(f"{emoji_char} {opt}")
        markup.add("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    else:
        markup = types.ReplyKeyboardRemove()
    
    bot.send_message(user_id, progress, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(user_id, process_answer, current_step=current_step)

def process_answer(message, current_step):
    user_id = message.chat.id
    question = QUESTIONS[current_step]
    answer = message.text.strip()
    
    try:
        if 'options' in question:
            emoji_char = EMOJI.get(question['key'], '')
            clean_answer = answer.replace(f"{emoji_char} ", "").strip()
            
            if clean_answer not in question['options'] and clean_answer != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
            
            user_data[user_id][question['key']] = clean_answer if clean_answer != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else None
            
        elif question.get('type') == 'number':
            value = float(answer)
            
            if 'min' in question and value < question['min']:
                raise ValueError(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {question['min']}")
                
            if 'max' in question and value > question['max']:
                raise ValueError(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {question['max']}")
                
            user_data[user_id][question['key']] = value
            
        elif question.get('multiple'):
            user_data[user_id][question['key']] = answer.split(', ')
            
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
        bot.send_message(user_id, error_msg)
        return ask_next_question(user_id)
    
    user_data[user_id]['step'] += 1
    ask_next_question(user_id)

def calculate_cost(data):
    total = 0
    details = []
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
    floor_type = data.get('floors', '–û–¥–Ω–æ—ç—Ç–∞–∂–Ω—ã–π')
    base_price = COSTS['work']['base']['price']
    multiplier = COSTS['work']['base']['floor_multiplier'].get(floor_type, 1.0)
    area = data.get('area', 100)
    base_cost = area * base_price * multiplier
    total += base_cost
    details.append(f"–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã ({floor_type}): {base_cost:,.0f} —Ä—É–±.")
    
    # –§—É–Ω–¥–∞–º–µ–Ω—Ç
    foundation_type = data.get('foundation')
    if foundation_type and foundation_type != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        foundation_cost = COSTS['materials']['foundation'].get(foundation_type, 0)
        total += foundation_cost
        details.append(f"–§—É–Ω–¥–∞–º–µ–Ω—Ç ({foundation_type}): {foundation_cost:,.0f} —Ä—É–±.")
    
    # –ö—Ä–æ–≤–ª—è
    roof_type = data.get('roof')
    if roof_type and roof_type != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        roof_area = calculate_roof_area(data)
        roof_cost = roof_area * COSTS['materials']['roof'].get(roof_type, 0)
        total += roof_cost
        details.append(f"–ö—Ä–æ–≤–ª—è ({roof_type}): {roof_cost:,.0f} —Ä—É–±.")
    
    # –£—Ç–µ–ø–ª–∏—Ç–µ–ª—å
    insulation_type = data.get('insulation')
    if insulation_type and insulation_type != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        min_thickness = COSTS['materials']['insulation'][insulation_type]['min_thickness']
        actual_thickness = max(data.get('insulation_thickness', 0), min_thickness)
        insulation_cost = (actual_thickness / 100) * area * COSTS['materials']['insulation'][insulation_type]['price']
        total += insulation_cost
        details.append(f"–£—Ç–µ–ø–ª–∏—Ç–µ–ª—å ({insulation_type}): {insulation_cost:,.0f} —Ä—É–±.")
    
    # –í–Ω–µ—à–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞
    exterior_type = data.get('exterior')
    if exterior_type and exterior_type != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        exterior_cost = area * COSTS['materials']['exterior'].get(exterior_type, 0)
        total += exterior_cost
        details.append(f"–í–Ω–µ—à–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ ({exterior_type}): {exterior_cost:,.0f} —Ä—É–±.")
    
    # –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞
    interior_type = data.get('interior')
    if interior_type and interior_type != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        interior_cost = area * COSTS['materials']['interior'].get(interior_type, 0)
        total += interior_cost
        details.append(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ ({interior_type}): {interior_cost:,.0f} —Ä—É–±.")
    
    # –û–∫–Ω–∞ –∏ –¥–≤–µ—Ä–∏
    windows_cost = data.get('windows_count', 0) * COSTS['materials']['windows']
    entrance_doors_cost = data.get('entrance_doors', 0) * 15000
    inner_doors_cost = data.get('inner_doors', 0) * 8000
    doors_windows_total = windows_cost + entrance_doors_cost + inner_doors_cost
    total += doors_windows_total
    details.append(f"–û–∫–Ω–∞/–¥–≤–µ—Ä–∏: {doors_windows_total:,.0f} —Ä—É–±.")
    
    # –¢–µ—Ä—Ä–∞—Å–∞
    terrace_area = data.get('terrace_area', 0)
    terrace_cost = terrace_area * COSTS['work']['terrace']
    total += terrace_cost
    if terrace_area > 0:
        details.append(f"–¢–µ—Ä—Ä–∞—Å–∞: {terrace_cost:,.0f} —Ä—É–±.")
    
    # –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏
    utility_cost = sum(
        50000 if '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞' in data.get('utilities', []) else 0,
        30000 if '–í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ' in data.get('utilities', []) else 0,
        25000 if '–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è' in data.get('utilities', []) else 0,
        40000 if '–û—Ç–æ–ø–ª–µ–Ω–∏–µ' in data.get('utilities', []) else 0
    )
    total += utility_cost
    if utility_cost > 0:
        details.append(f"–ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏: {utility_cost:,.0f} —Ä—É–±.")
    
    # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    region = data.get('region', '–î—Ä—É–≥–æ–π')
    regional_coeff = REGIONAL_COEFFICIENTS.get(region, 1.0)
    total *= regional_coeff
    details.append(f"–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç ({region}): x{regional_coeff}")
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–¥–æ–∫
    total_before_discount = total
    total = apply_discounts(total, data)
    if total < total_before_discount:
        details.append(f"–°–∫–∏–¥–∫–∞: {total_before_discount - total:,.0f} —Ä—É–±.")
    
    return round(total, 2), details

def calculate_and_send_result(user_id):
    try:
        data = user_data[user_id]
        total, details = calculate_cost(data)
        
        result = [
            "üìä –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:",
            *details,
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
            f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total:,.0f} —Ä—É–±."
        ]
        
        bot.send_message(user_id, "\n".join(result), parse_mode='Markdown')
        
    except Exception as e:
        bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}")
    finally:
        if user_id in user_data:
            del user_data[user_id]

app = Flask(__name__)

@app.route('/')
def home():
    return "Construction Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def start_bot():
    bot.polling(none_stop=True)

if __name__ == '__main__':
    bot_thread = threading.Thread(target=start_bot)
    bot_thread.daemon = True
    bot_thread.start()
    app.run(host='0.0.0.0', port=int(os.getenv('PORT', 5000)))