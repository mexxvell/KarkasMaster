import os
from flask import Flask
import telebot
from telebot import types
import logging
import threading

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv('API_TOKEN')
bot = telebot.TeleBot(API_TOKEN)

user_data = {}

# –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
EMOJI = {
    'foundation': 'üèõÔ∏è',
    'roof': 'Ëë∫',
    'insulation': '‚ùÑÔ∏è',
    'exterior': 'üñåÔ∏è',
    'interior': 'ÁÆ¶Ô∏è',
    'utilities': '‚ö°',
    'windows': 'ü™ü',
    'doors': 'üö™',
    'terrace': 'üå≥'
}

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
COSTS = {
    'materials': {
        'foundation': 15000,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç
        'roof': {
            '–º–µ—Ç–∞–ª–ª–æ—á–µ—Ä–µ–ø–∏—Ü–∞': 1200,
            '–º—è–≥–∫–∞—è –∫—Ä–æ–≤–ª—è': 800,
            '—Ñ–∞–ª—å—Ü–µ–≤–∞—è –∫—Ä–æ–≤–ª—è': 1800
        },
        'insulation': {
            '–º–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–∞—Ç–∞': 500,
            '—ç–∫–æ–≤–∞—Ç–∞': 400,
            '–ø–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª': 600
        },
        'exterior': {
            '—Å–∞–π–¥–∏–Ω–≥': 300,
            '–≤–∞–≥–æ–Ω–∫–∞': 400,
            '—à—Ç—É–∫–∞—Ç—É—Ä–∫–∞': 250
        },
        'interior': {
            '–≤–∞–≥–æ–Ω–∫–∞': 350,
            '–≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω': 300,
            '–¥—Ä—É–≥–æ–µ': 0
        },
        'windows': 5000,  # –∑–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–∫–Ω–æ
        'doors': {
            '–≤—Ö–æ–¥–Ω–∞—è': 15000,
            '–º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω–∞—è': 8000
        }
    },
    'work': {
        'base': 8000,  # –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç –∑–∞ –∫–≤.–º
        'terrace': 3000,  # –∑–∞ –∫–≤.–º —Ç–µ—Ä—Ä–∞—Å—ã
        'basement': 1500  # –∑–∞ –∫–≤.–º –ø–æ–¥–≤–∞–ª–∞
    }
}

QUESTIONS = [
    {
        'text': 'üè° –ü–ª–æ—â–∞–¥—å –¥–æ–º–∞ (–∫–≤.–º):',
        'options': ['100 –º¬≤', '120 –º¬≤', '150 –º¬≤'],
        'key': 'area'
    },
    {
        'text': '—ç—Ç–∞–∂–Ω–æ—Å—Ç—å üè†:',
        'options': ['–û–¥–Ω–æ—ç—Ç–∞–∂–Ω—ã–π', '–î–≤—É—Ö—ç—Ç–∞–∂–Ω—ã–π', '–° –º–∞–Ω—Å–∞—Ä–¥–æ–π'],
        'key': 'floors'
    },
    {
        'text': '–§—É–Ω–¥–∞–º–µ–Ω—Ç üèóÔ∏è:',
        'key': 'foundation',
        'auto_value': '—Å–≤–∞–π–Ω–æ-–≤–∏–Ω—Ç–æ–≤–æ–π'
    },
    {
        'text': '–ö—Ä–æ–≤–ª—è üèõÔ∏è:',
        'options': ['–ú–µ—Ç–∞–ª–ª–æ—á–µ—Ä–µ–ø–∏—Ü–∞', '–ú—è–≥–∫–∞—è –∫—Ä–æ–≤–ª—è', '–§–∞–ª—å—Ü–µ–≤–∞—è –∫—Ä–æ–≤–ª—è'],
        'key': 'roof'
    },
    {
        'text': '–£—Ç–µ–ø–ª–∏—Ç–µ–ª—å ‚ùÑÔ∏è:',
        'options': ['–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–∞—Ç–∞', '–≠–∫–æ–≤–∞—Ç–∞', '–ü–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª'],
        'key': 'insulation'
    },
    {
        'text': '–¢–æ–ª—â–∏–Ω–∞ —É—Ç–µ–ø–ª–∏—Ç–µ–ª—è (–º–º) üìè:',
        'type': 'number',
        'key': 'insulation_thickness'
    },
    {
        'text': '–í–Ω–µ—à–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ üé®:',
        'options': ['–°–∞–π–¥–∏–Ω–≥', '–í–∞–≥–æ–Ω–∫–∞', '–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞'],
        'key': 'exterior'
    },
    {
        'text': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ üõãÔ∏è:',
        'options': ['–í–∞–≥–æ–Ω–∫–∞', '–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω', '–î—Ä—É–≥–æ–µ'],
        'key': 'interior'
    },
    {
        'text': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω ü™ü:',
        'type': 'number',
        'key': 'windows_count'
    },
    {
        'text': '–í—Ö–æ–¥–Ω—ã–µ –¥–≤–µ—Ä–∏ üö™:',
        'type': 'number',
        'key': 'entrance_doors'
    },
    {
        'text': '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏ üö™:',
        'type': 'number',
        'key': 'inner_doors'
    },
    {
        'text': '–¢–µ—Ä—Ä–∞—Å–∞/–±–∞–ª–∫–æ–Ω (–∫–≤.–º) üå≥:',
        'type': 'number',
        'key': 'terrace_area'
    },
    {
        'text': '–ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏ ‚ö° (–≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ):',
        'options': ['–≠–ª–µ–∫—Ç—Ä–∏–∫–∞', '–í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ', '–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è', '–û—Ç–æ–ø–ª–µ–Ω–∏–µ'],
        'multiple': True,
        'key': 'utilities'
    }
]

TOTAL_STEPS = len(QUESTIONS)

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    user_data[user_id] = {'step': 0}
    ask_next_question(user_id)

def ask_next_question(user_id):
    current_step = user_data[user_id]['step']
    if current_step >= TOTAL_STEPS:
        calculate_and_send_result(user_id)
        return
    
    question = QUESTIONS[current_step]
    text = question['text']
    progress = f"–®–∞–≥ {current_step+1} –∏–∑ {TOTAL_STEPS}\n\n{text}"
    
    if 'options' in question:
        emoji_char = EMOJI.get(question['key'], '')
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add(*[f"{emoji_char} {opt}" for opt in question['options']])
    else:
        markup = types.ReplyKeyboardRemove()
    
    bot.send_message(user_id, progress, reply_markup=markup)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä
    if 'auto_value' in question:
        user_data[user_id][question['key']] = question['auto_value']
        user_data[user_id]['step'] += 1
        ask_next_question(user_id)
    else:
        bot.register_next_step_handler_by_chat_id(user_id, process_answer, current_step=current_step)

def process_answer(message, current_step):
    user_id = message.chat.id
    question = QUESTIONS[current_step]
    answer = message.text.strip()
    
    if 'options' in question:
        if 'multiple' in question and question['multiple']:
            selected = []
            for option in question['options']:
                if option in answer:
                    selected.append(option)
            user_data[user_id][question['key']] = selected
        else:
            if answer not in question['options']:
                bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞')
                ask_next_question(user_id)
                return
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏
            if question['key'] == 'area':
                user_data[user_id][question['key']] = int(answer.split()[0])
            else:
                user_data[user_id][question['key']] = answer
    else:
        try:
            value = float(answer)
            user_data[user_id][question['key']] = value
        except:
            bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
            ask_next_question(user_id)
            return
    
    user_data[user_id]['step'] = current_step + 1
    ask_next_question(user_id)

def calculate_cost(data):
    total = 0
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
    total += data['area'] * COSTS['work']['base']
    # –§—É–Ω–¥–∞–º–µ–Ω—Ç (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≤–∞–π–Ω–æ-–≤–∏–Ω—Ç–æ–≤–æ–π)
    total += COSTS['materials']['foundation']
    # –ö—Ä–æ–≤–ª—è
    roof_type = data.get('roof', '')
    roof_area = data['area'] * 0.8  # –ø—Ä–∏–º–µ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥—å –∫—Ä–æ–≤–ª–∏
    total += roof_area * COSTS['materials']['roof'].get(roof_type, 0)
    # –£—Ç–µ–ø–ª–∏—Ç–µ–ª—å
    insulation_type = data.get('insulation', '')
    insulation_cost = (data['insulation_thickness'] / 100) * data['area'] * \
        COSTS['materials']['insulation'].get(insulation_type, 0)
    total += insulation_cost
    # –í–Ω–µ—à–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞
    total += data['area'] * COSTS['materials']['exterior'].get(data['exterior'], 0)
    # –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞
    total += data['area'] * COSTS['materials']['interior'].get(data['interior'], 0)
    # –û–∫–Ω–∞ –∏ –¥–≤–µ—Ä–∏
    windows = data.get('windows_count', 0) * COSTS['materials']['windows']
    doors = (data.get('entrance_doors', 0) * COSTS['materials']['doors']['–≤—Ö–æ–¥–Ω–∞—è']) + \
            (data.get('inner_doors', 0) * COSTS['materials']['doors']['–º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω–∞—è'])
    total += windows + doors
    # –¢–µ—Ä—Ä–∞—Å–∞
    terrace_area = data.get('terrace_area', 0)
    total += terrace_area * COSTS['work']['terrace']
    # –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏
    utility_cost = calculate_utility_cost(data)
    total += utility_cost
    return round(total, 2)

def calculate_utility_cost(data):
    utilities = data.get('utilities', [])
    total = 0
    for utility in utilities:
        if utility == '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞':
            total += 50000
        elif utility == '–í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ':
            total += 30000
        elif utility == '–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è':
            total += 25000
        elif utility == '–û—Ç–æ–ø–ª–µ–Ω–∏–µ':
            total += 40000
    return total

def calculate_and_send_result(user_id):
    data = user_data[user_id]
    try:
        total = calculate_cost(data)
        result = f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total} —Ä—É–±.\n\n" \
                 f"–†–∞—Å—á–µ—Ç –≤–∫–ª—é—á–∞–µ—Ç:\n" \
                 f"‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã: {data['area'] * COSTS['work']['base']} —Ä—É–±.\n" \
                 f"‚Ä¢ –§—É–Ω–¥–∞–º–µ–Ω—Ç: {COSTS['materials']['foundation']} —Ä—É–±.\n" \
                 f"‚Ä¢ –ö—Ä–æ–≤–ª—è: {data.get('roof', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')} - {COSTS['materials']['roof'].get(data.get('roof', ''), 0) * data['area'] * 0.8} —Ä—É–±.\n" \
                 f"‚Ä¢ –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏: {calculate_utility_cost(data)} —Ä—É–±."
        bot.send_message(user_id, result, reply_markup=types.ReplyKeyboardRemove())
    except Exception as e:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ")
    finally:
        del user_data[user_id]

# Flask setup
app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def start_bot():
    bot.remove_webhook()
    bot.delete_webhook()
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    import time
    time.sleep(3)
    bot.infinity_polling(
        skip_pending=True,
        timeout=60  # –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç
    )

if __name__ == '__main__':
    bot_thread = threading.Thread(target=start_bot)
    bot_thread.daemon = True
    bot_thread.start()
    
    port = int(os.getenv('PORT', 5000))
    app.run(host='0.0.0.0', port=port)