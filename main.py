import os
import logging
import threading
import math
from datetime import datetime
from flask import Flask
import telebot
from telebot import types
import requests
from apscheduler.schedulers.background import BackgroundScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)
@app.route('/')
def index():
    return "Telegram-–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.getenv('API_TOKEN')
bot = telebot.TeleBot(API_TOKEN)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = BackgroundScheduler()
scheduler.start()

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_data = {}
analytics_data = {
    'started_calculations': 0,
    'completed_calculations': 0,
    'abandoned_steps': {}
}

STYLES = {
    'header': 'üîπ',
    'error': '‚ùå',
    'success': '‚úÖ',
    'warning': '‚ö†Ô∏è',
    'separator': '\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ',
    'currency': '‚ÇΩ'
}

EMOJI_MAP = {
    'foundation': 'üèóÔ∏è',
    'roof': 'üèõÔ∏è',
    'insulation': '‚ùÑÔ∏è',
    'exterior': 'üé®',
    'interior': 'üõãÔ∏è',
    'windows': 'ü™ü',
    'doors': 'üö™',
    'terrace': 'üå≥',
    'region': 'üìç'
}

COST_CONFIG = {
    'materials': {
        'foundation': {
            '–°–≤–∞–π–Ω–æ-–≤–∏–Ω—Ç–æ–≤–æ–π': {'price_per_pile': 2500, 'pile_distance': 2},
            '–õ–µ–Ω—Ç–æ—á–Ω—ã–π': {'price_per_m3': 8000},
            '–ü–ª–∏—Ç–Ω—ã–π': {'price_per_m2': 2500}
        },
        'roof': {
            '–ú–µ—Ç–∞–ª–ª–æ—á–µ—Ä–µ–ø–∏—Ü–∞': 1200,
            '–ú—è–≥–∫–∞—è –∫—Ä–æ–≤–ª—è': 800,
            '–§–∞–ª—å—Ü–µ–≤–∞—è –∫—Ä–æ–≤–ª—è': 1800,
            '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å': 0
        },
        'insulation': {
            '–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–∞—Ç–∞': {'price_per_m3': 5000},
            '–≠–∫–æ–≤–∞—Ç–∞': {'price_per_m3': 4000},
            '–ü–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª': {'price_per_m3': 6000},
            '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å': 0
        },
        'exterior': {
            '–°–∞–π–¥–∏–Ω–≥': 300,
            '–í–∞–≥–æ–Ω–∫–∞': 400,
            '–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞': 250,
            '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å': 0
        },
        'interior': {
            '–í–∞–≥–æ–Ω–∫–∞': 350,
            '–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω': 300,
            '–î—Ä—É–≥–æ–µ': 0,
            '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å': 0
        },
        'windows': 5000,
        'doors': {
            '–≤—Ö–æ–¥–Ω–∞—è': 15000,
            '–º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω–∞—è': 8000
        }
    },
    'work': {
        'base': {
            'price_per_m2': 8000,
            'floor_multiplier': {
                '–û–¥–Ω–æ—ç—Ç–∞–∂–Ω—ã–π': 1.0,
                '–î–≤—É—Ö—ç—Ç–∞–∂–Ω—ã–π': 0.9,
                '–° –º–∞–Ω—Å–∞—Ä–¥–æ–π': 1.2
            }
        },
        'terrace': 3000,
        'basement': 1500
    }
}

REGIONAL_COEFFICIENTS = {
    '–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª': {'base': 1.0, 'delivery': 1.05},
    '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª': {'base': 1.2, 'delivery': 1.1},
    '–î—Ä—É–≥–æ–π': {'base': 1.5, 'delivery': 1.3}
}

QUESTIONS = [
    {
        'text': 'üìç –†–µ–≥–∏–æ–Ω —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞:',
        'options': ['–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª', '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª', '–î—Ä—É–≥–æ–π'],
        'key': 'region',
        'row_width': 2
    },
    {
        'text': 'üìê –î–ª–∏–Ω–∞ –¥–æ–º–∞ (–º):',
        'key': 'length',
        'options': ['7', '10', '12', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'row_width': 3
    },
    {
        'text': 'üìè –®–∏—Ä–∏–Ω–∞ –¥–æ–º–∞ (–º):',
        'key': 'width',
        'options': ['14', '10', '8', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'row_width': 3
    },
    {
        'text': '–í—ã—Å–æ—Ç–∞ —ç—Ç–∞–∂–∞ (–º):',
        'key': 'height',
        'options': ['2.5', '3.0', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'row_width': 2
    },
    {
        'text': '–≠—Ç–∞–∂–Ω–æ—Å—Ç—å üè†:',
        'options': ['–û–¥–Ω–æ—ç—Ç–∞–∂–Ω—ã–π', '–î–≤—É—Ö—ç—Ç–∞–∂–Ω—ã–π', '–° –º–∞–Ω—Å–∞—Ä–¥–æ–π', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'floors',
        'row_width': 2
    },
    {
        'text': '–§—É–Ω–¥–∞–º–µ–Ω—Ç üèóÔ∏è:',
        'options': ['–°–≤–∞–π–Ω–æ-–≤–∏–Ω—Ç–æ–≤–æ–π', '–õ–µ–Ω—Ç–æ—á–Ω—ã–π', '–ü–ª–∏—Ç–Ω—ã–π', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'foundation',
        'row_width': 2
    },
    {
        'text': '–ö—Ä–æ–≤–ª—è:',
        'options': ['–ú–µ—Ç–∞–ª–ª–æ—á–µ—Ä–µ–ø–∏—Ü–∞', '–ú—è–≥–∫–∞—è –∫—Ä–æ–≤–ª—è', '–§–∞–ª—å—Ü–µ–≤–∞—è –∫—Ä–æ–≤–ª—è', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'roof',
        'row_width': 2
    },
    {
        'text': '–£—Ç–µ–ø–ª–∏—Ç–µ–ª—å ‚ùÑÔ∏è:',
        'options': ['–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–∞—Ç–∞', '–≠–∫–æ–≤–∞—Ç–∞', '–ü–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'insulation',
        'row_width': 2
    },
    {
        'text': '–¢–æ–ª—â–∏–Ω–∞ —É—Ç–µ–ø–ª–∏—Ç–µ–ª—è (–º–º) üìè:',
        'options': ['100', '150', '200'],
        'key': 'insulation_thickness',
        'row_width': 3
    },
    {
        'text': '–í–Ω–µ—à–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ üé®:',
        'options': ['–°–∞–π–¥–∏–Ω–≥', '–í–∞–≥–æ–Ω–∫–∞', '–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'exterior',
        'row_width': 2
    },
    {
        'text': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ üõãÔ∏è:',
        'options': ['–í–∞–≥–æ–Ω–∫–∞', '–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω', '–î—Ä—É–≥–æ–µ', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'interior',
        'row_width': 2
    },
    {
        'text': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω ü™ü:',
        'options': ['1', '2', '3', '4', '5', '6'],
        'key': 'windows_count',
        'row_width': 3
    },
    {
        'text': '–í—Ö–æ–¥–Ω—ã–µ –¥–≤–µ—Ä–∏ üö™:',
        'options': ['1', '2', '3', '4', '5', '6'],
        'key': 'entrance_doors',
        'row_width': 3
    },
    {
        'text': '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏ üö™:',
        'options': ['1', '2', '3', '4', '5', '6'],
        'key': 'inner_doors',
        'row_width': 3
    },
    {
        'text': '–¢–µ—Ä—Ä–∞—Å–∞/–±–∞–ª–∫–æ–Ω (–∫–≤.–º) üå≥:',
        'options': ['0', '10', '20', '30', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        'key': 'terrace_area',
        'row_width': 2
    }
]

TOTAL_STEPS = len(QUESTIONS)

GUIDES = {
    'foundation': {
        'title': 'üèóÔ∏è –í—ã–±–æ—Ä —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞',
        'content': '''üîç <b>–ü–æ–¥—Ä–æ–±–Ω—ã–π –≥–∞–π–¥ –ø–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–º:</b>
1. <u>–°–≤–∞–π–Ω–æ-–≤–∏–Ω—Ç–æ–≤–æ–π</u>
   - –°—Ç–æ–∏–º–æ—Å—Ç—å: 15 000-20 000 —Ä—É–±/–º¬≤
   - –°—Ä–æ–∫ –º–æ–Ω—Ç–∞–∂–∞: 2-3 –¥–Ω—è
   - –ì—Ä—É–Ω—Ç—ã: –±–æ–ª–æ—Ç–∏—Å—Ç—ã–µ, –ø—É—á–∏–Ω–∏—Å—Ç—ã–µ
   - –ü–ª—é—Å—ã: –±—ã—Å—Ç—Ä—ã–π –º–æ–Ω—Ç–∞–∂, –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞
   - –ú–∏–Ω—É—Å—ã: —Ç—Ä–µ–±—É–µ—Ç –∞–Ω—Ç–∏–∫–æ—Ä—Ä–æ–∑–∏–π–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
2. <u>–õ–µ–Ω—Ç–æ—á–Ω—ã–π</u>
   - –°—Ç–æ–∏–º–æ—Å—Ç—å: 20 000-25 000 —Ä—É–±/–º¬≤
   - –°—Ä–æ–∫ –º–æ–Ω—Ç–∞–∂–∞: 14-21 –¥–µ–Ω—å
   - –ì—Ä—É–Ω—Ç—ã: —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ, –ø–µ—Å—á–∞–Ω—ã–µ
   - –ü–ª—é—Å—ã: –≤—ã—Å–æ–∫–∞—è –Ω–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
   - –ú–∏–Ω—É—Å—ã: —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —É—Å–∞–¥–∫—É
üí° <b>–°–æ–≤–µ—Ç—ã –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤:</b>
‚úÖ –í—Å–µ–≥–¥–∞ –¥–µ–ª–∞–π—Ç–µ –≥–µ–æ–ª–æ–≥–∏—é –≥—Ä—É–Ω—Ç–∞
‚ùå –ù–µ —ç–∫–æ–Ω–æ–º—å—Ç–µ –Ω–∞ –≥–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏–∏
üìÜ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω –º–æ–Ω—Ç–∞–∂–∞: –ª–µ—Ç–æ-–æ—Å–µ–Ω—å'''
    },
    'walls': {
        'title': 'üß± –ö–∞—Ä–∫–∞—Å –∏ —Å—Ç–µ–Ω—ã',
        'content': '''üîç <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞:</b>
1. <u>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞</u>
   - –¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω: 200-250 –º–º
   - –£—Ç–µ–ø–ª–∏—Ç–µ–ª—å: –±–∞–∑–∞–ª—å—Ç–æ–≤–∞—è –≤–∞—Ç–∞
   - –û–±—à–∏–≤–∫–∞: OSB-3 12 –º–º
   - –ü–∞—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
2. <u>–î–≤–æ–π–Ω–æ–π –∫–∞—Ä–∫–∞—Å</u>
   - –¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω: 300-400 –º–º
   - –ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω–æ–µ —É—Ç–µ–ø–ª–µ–Ω–∏–µ
   - –®—É–º–æ–∏–∑–æ–ª—è—Ü–∏—è: 20-30 –¥–ë
üìê <b>–†–∞—Å—á–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:</b>
- –°—Ç–æ–π–∫–∏: 50x150 –º–º —Å —à–∞–≥–æ–º 600 –º–º
- –û–±–≤—è–∑–∫–∏: –¥–≤–æ–π–Ω–∞—è –¥–æ—Å–∫–∞ 50x200 –º–º
- –ö—Ä–µ–ø–µ–∂: –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–µ —É–≥–æ–ª–∫–∏'''
    },
    'roof': {
        'title': 'üèõÔ∏è –ö—Ä–æ–≤–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã',
        'content': '''üîç <b>–¢–∏–ø—ã –∫—Ä–æ–≤–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º:</b>
1. <u>–•–æ–ª–æ–¥–Ω–∞—è –∫—Ä–æ–≤–ª—è</u>
   - –£–∫–ª–æ–Ω: 25-45¬∞
   - –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è: –ø—Ä–æ–¥—É—Ö–∏ + –∫–æ–Ω—å–∫–æ–≤—ã–π –∞—ç—Ä–∞—Ç–æ—Ä
   - –°—Ä–æ–∫ —Å–ª—É–∂–±—ã: 25-50 –ª–µ—Ç
2. <u>–¢–µ–ø–ª–∞—è –∫—Ä–æ–≤–ª—è</u>
   - –£—Ç–µ–ø–ª–∏—Ç–µ–ª—å: 250-300 –º–º
   - –ü–∞—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è: —Ñ–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–µ–º–±—Ä–∞–Ω–∞
   - –ö–æ–Ω—Ç—Ä–æ–±—Ä–µ—à–µ—Ç–∫–∞: 50 –º–º –∑–∞–∑–æ—Ä
‚ö° <b>–í–∞–∂–Ω–æ:</b>
- –†–∞—Å—á–µ—Ç —Å–Ω–µ–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–æ –°–ü 20.13330
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ—Ç—Ä–æ–∑–∞—â–∏—Ç–Ω—ã–µ –ø–ª–∞–Ω–∫–∏
- –ú–æ–Ω—Ç–∞–∂ –µ–Ω–¥–æ–≤—ã —Å –¥–≤–æ–π–Ω—ã–º —Å–ª–æ–µ–º –≥–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏–∏'''
    }
}

def get_user_data(user_id):
    user_id_str = str(user_id)
    if user_id_str not in user_data:
        user_data[user_id_str] = {
            'projects': {},
            'current_project': None,
            'last_active': datetime.now(),
            'reminders': []
        }
    return user_data[user_id_str]

def create_keyboard(items, row_width, skip_button=False):
    markup = types.ReplyKeyboardMarkup(row_width=row_width, resize_keyboard=True)
    filtered = [item for item in items if item != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']
    for i in range(0, len(filtered), row_width):
        markup.add(*filtered[i:i+row_width])
    if skip_button:
        markup.add('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
    markup.add('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç')
    return markup

def schedule_reminder(user_id, project_name):
    job_id = f"reminder_{user_id}_{project_name}"
    if not scheduler.get_job(job_id):
        scheduler.add_job(
            send_reminder,
            'interval',
            days=1,
            id=job_id,
            args=[user_id, project_name],
            max_instances=3
        )
        logger.info(f"Scheduled reminder: {job_id}")

def send_reminder(user_id, project_name):
    try:
        bot.send_message(
            user_id,
            f"{STYLES['warning']} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–µ–∫—Ç–µ '{project_name}'\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å—á–µ—Ç? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {str(e)}")

def track_event(event_type, step=None):
    if event_type == 'start':
        analytics_data['started_calculations'] += 1
    elif event_type == 'complete':
        analytics_data['completed_calculations'] += 1
    elif event_type == 'abandon':
        analytics_data['abandoned_steps'][step] = analytics_data['abandoned_steps'].get(step, 0) + 1

def create_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = ["üè† –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", "üìö –ì–∞–π–¥—ã"]
    markup.add(*buttons)
    return markup

@bot.message_handler(commands=['start', 'menu'])
def show_main_menu(message):
    user_id = message.chat.id
    user = get_user_data(user_id)
    user['last_active'] = datetime.now()
    bot.send_message(user_id, f"{STYLES['header']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())

@bot.message_handler(func=lambda m: m.text == "üè† –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
def start_new_project(message):
    user_id = message.chat.id
    user = get_user_data(user_id)
    project_id = f"project_{datetime.now().strftime('%Y%m%d%H%M%S')}"
    user['projects'][project_id] = {
        'name': f"–ü—Ä–æ–µ–∫—Ç –æ—Ç {datetime.now().strftime('%d.%m.%Y')}",
        'data': {},
        'created_at': datetime.now(),
        'completed': False
    }
    user['current_project'] = project_id
    track_event('start')
    ask_next_question(user_id)

def ask_next_question(user_id):
    user = get_user_data(user_id)
    project = user['projects'][user['current_project']]
    current_step = project['data'].get('step', 0)
    if current_step >= TOTAL_STEPS:
        calculate_and_send_result(user_id)
        return
    question = QUESTIONS[current_step]
    progress_text = (
        f"{STYLES['header']} –®–∞–≥ {current_step + 1}/{TOTAL_STEPS}\n"
        f"{question['text']}"
    )
    markup = create_keyboard(question['options'], question.get('row_width', 2), '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' in question['options'])
    bot.send_message(user_id, progress_text, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(user_id, process_answer, current_step=current_step)

def validate_input(answer, question):
    if answer not in question['options'] and answer != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        return f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞: {', '.join(question['options'])}"
    if question['key'] in ['length', 'width', 'height', 'terrace_area']:
        try:
            value = float(answer.replace(',', '.'))
            if value < 0:
                return "–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º"
        except ValueError:
            return "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
    elif question['key'] in ['windows_count', 'entrance_doors', 'inner_doors']:
        if not answer.isdigit():
            return "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ"
        if int(answer) < 0:
            return "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º"
    return None

def process_answer(message, current_step):
    user_id = message.chat.id
    user = get_user_data(user_id)
    project = user['projects'][user['current_project']]
    question = QUESTIONS[current_step]
    try:
        answer = message.text.strip()
        if answer == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç":
            del user['projects'][user['current_project']]
            user['current_project'] = None
            show_main_menu(message)
            return
        error = validate_input(answer, question)
        if error:
            raise ValueError(error)
        if answer == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            project['data'][question['key']] = None
        else:
            if question['key'] in ['windows_count', 'entrance_doors', 'inner_doors']:
                project['data'][question['key']] = int(answer)
            elif question['key'] in ['length', 'width', 'height', 'terrace_area']:
                project['data'][question['key']] = float(answer.replace(',', '.'))
            else:
                project['data'][question['key']] = answer
        project['data']['step'] = current_step + 1
        user['last_active'] = datetime.now()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        bot.send_message(
            user_id,
            f"{STYLES['error']} –û—à–∏–±–∫–∞:\n{str(e)}\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:",
            reply_markup=create_keyboard(
                question['options'],
                question.get('row_width', 2),
                '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' in question['options']
            )
        )
        bot.register_next_step_handler_by_chat_id(user_id, process_answer, current_step=current_step)
        track_event('abandon', current_step)
        return
    ask_next_question(user_id)

class CostCalculator:
    @staticmethod
    def calculate_total(data):
        total = 0
        details = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
        base_work = CostCalculator._calculate_base_works(data)
        total += base_work['total']
        details.extend(base_work['details'])
        
        # –§—É–Ω–¥–∞–º–µ–Ω—Ç
        foundation_cost = CostCalculator._calculate_foundation_cost(data)
        total += foundation_cost['total']
        details.extend(foundation_cost['details'])
        
        # –ö—Ä–æ–≤–ª—è
        roof_cost = CostCalculator._calculate_roof_cost(data)
        total += roof_cost['total']
        details.extend(roof_cost['details'])
        
        # –£—Ç–µ–ø–ª–µ–Ω–∏–µ
        insulation_cost = CostCalculator._calculate_insulation_cost(data)
        total += insulation_cost['total']
        details.extend(insulation_cost['details'])
        
        # –û—Ç–¥–µ–ª–∫–∞
        exterior_cost = CostCalculator._calculate_exterior_cost(data)
        total += exterior_cost['total']
        details.extend(exterior_cost['details'])
        
        interior_cost = CostCalculator._calculate_interior_cost(data)
        total += interior_cost['total']
        details.extend(interior_cost['details'])
        
        # –û–∫–Ω–∞ –∏ –¥–≤–µ—Ä–∏
        openings_cost = CostCalculator._calculate_openings_cost(data)
        total += openings_cost['total']
        details.extend(openings_cost['details'])
        
        # –¢–µ—Ä—Ä–∞—Å–∞
        terrace_cost = CostCalculator._calculate_terrace_cost(data)
        total += terrace_cost['total']
        details.extend(terrace_cost['details'])
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        total = CostCalculator._apply_coefficients(data, total, details)
        
        return round(total), details

    @staticmethod
    def _calculate_base_works(data):
        total = 0
        details = []
        floors = data.get('floors', '–û–¥–Ω–æ—ç—Ç–∞–∂–Ω—ã–π')
        length = data.get('length', 7)
        width = data.get('width', 14)
        height = data.get('height', 2.5)
        area = length * width
        
        multiplier = COST_CONFIG['work']['base']['floor_multiplier'][floors]
        cost = area * height * COST_CONFIG['work']['base']['price_per_m2'] * multiplier
        total += cost
        details.append(f"üîπ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã ({floors}): {cost:,.0f}{STYLES['currency']}")
        return {'total': total, 'details': details}

    @staticmethod
    def _calculate_foundation_cost(data):
        total = 0
        details = []
        foundation_type = data.get('foundation')
        if not foundation_type or foundation_type == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            return {'total': 0, 'details': []}
        
        config = COST_CONFIG['materials']['foundation'][foundation_type]
        length = data.get('length', 7)
        width = data.get('width', 14)
        perimeter = 2 * (length + width)
        
        if foundation_type == '–°–≤–∞–π–Ω–æ-–≤–∏–Ω—Ç–æ–≤–æ–π':
            num_piles = perimeter / config['pile_distance']
            cost = num_piles * config['price_per_pile']
            details.append(f"ŸÖÿµÿßŸÑÿ≠ –°–≤–∞–π–Ω—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç: {num_piles:.0f} —Å–≤–∞–π")
        elif foundation_type == '–õ–µ–Ω—Ç–æ—á–Ω—ã–π':
            volume = perimeter * 0.4 * 0.6  # –®–∏—Ä–∏–Ω–∞ 0.4–º, –≤—ã—Å–æ—Ç–∞ 0.6–º
            cost = volume * config['price_per_m3']
            details.append(f"ŸÖÿµÿßŸÑÿ≠ –õ–µ–Ω—Ç–æ—á–Ω—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç: {volume:.2f} –º¬≥")
        elif foundation_type == '–ü–ª–∏—Ç–Ω—ã–π':
            area = length * width
            cost = area * config['price_per_m2']
            details.append(f"ÊÑç –ü–ª–∏—Ç–Ω—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç: {area:.2f} –º¬≤")
            
        total += cost
        return {'total': total, 'details': details}

    @staticmethod
    def _calculate_roof_cost(data):
        total = 0
        details = []
        roof_type = data.get('roof')
        if not roof_type or roof_type == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            return {'total': 0, 'details': []}
        
        length = data.get('length', 7)
        width = data.get('width', 14)
        roof_area = 2 * (length * math.sqrt((width/2)**2 + (3)**2))  # –î–ª—è –¥–≤—É—Å–∫–∞—Ç–Ω–æ–π
        
        cost = roof_area * COST_CONFIG['materials']['roof'][roof_type]
        total += cost
        details.append(f"üèõÔ∏è –ö—Ä–æ–≤–ª—è ({roof_type}): {roof_area:.1f} –º¬≤")
        return {'total': total, 'details': details}

    @staticmethod
    def _calculate_insulation_cost(data):
        total = 0
        details = []
        insulation_type = data.get('insulation')
        if not insulation_type or insulation_type == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            return {'total': 0, 'details': []}
        
        thickness = data.get('insulation_thickness', 150) / 1000
        length = data.get('length', 7)
        width = data.get('width', 14)
        height = data.get('height', 2.5)
        
        wall_area = 2 * (length + width) * height
        roof_area = 2 * (length * math.sqrt((width/2)**2 + (3)**2))
        floor_area = length * width
        
        volume = (wall_area + roof_area + floor_area) * thickness
        cost = volume * COST_CONFIG['materials']['insulation'][insulation_type]['price_per_m3']
        total += cost
        details.append(f"‚ùÑÔ∏è –£—Ç–µ–ø–ª–µ–Ω–∏–µ ({insulation_type}): {volume:.2f} –º¬≥")
        return {'total': total, 'details': details}

    @staticmethod
    def _calculate_exterior_cost(data):
        total = 0
        details = []
        exterior = data.get('exterior')
        if not exterior or exterior == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            return {'total': 0, 'details': []}
        
        length = data.get('length', 7)
        width = data.get('height', 14)
        height = data.get('height', 2.5)
        wall_area = 2 * (length + width) * height
        
        cost = wall_area * COST_CONFIG['materials']['exterior'][exterior]
        total += cost
        details.append(f"üé® –í–Ω–µ—à–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ ({exterior}): {wall_area:.1f} –º¬≤")
        return {'total': total, 'details': details}

    @staticmethod
    def _calculate_interior_cost(data):
        total = 0
        details = []
        interior = data.get('interior')
        if not interior or interior == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            return {'total': 0, 'details': []}
        
        length = data.get('length', 7)
        width = data.get('width', 14)
        height = data.get('height', 2.5)
        wall_area = 2 * (length + width) * height
        
        cost = wall_area * COST_CONFIG['materials']['interior'][interior]
        total += cost
        details.append(f"üõãÔ∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ ({interior}): {wall_area:.1f} –º¬≤")
        return {'total': total, 'details': details}

    @staticmethod
    def _calculate_openings_cost(data):
        total = 0
        details = []
        windows = data.get('windows_count', 0)
        entrance = data.get('entrance_doors', 0)
        inner = data.get('inner_doors', 0)
        
        window_cost = windows * COST_CONFIG['materials']['windows']
        entrance_cost = entrance * COST_CONFIG['materials']['doors']['–≤—Ö–æ–¥–Ω–∞—è']
        inner_cost = inner * COST_CONFIG['materials']['doors']['–º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω–∞—è']
        
        total += window_cost + entrance_cost + inner_cost
        details.append(f"ü™ü –û–∫–Ω–∞: {windows} —à—Ç.")
        details.append(f"üö™ –í—Ö–æ–¥–Ω—ã–µ –¥–≤–µ—Ä–∏: {entrance} —à—Ç.")
        details.append(f"üö™ –ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏: {inner} —à—Ç.")
        return {'total': total, 'details': details}

    @staticmethod
    def _calculate_terrace_cost(data):
        total = 0
        details = []
        terrace = data.get('terrace_area', 0)
        if terrace <= 0:
            return {'total': 0, 'details': []}
        
        cost = terrace * COST_CONFIG['work']['terrace']
        total += cost
        details.append(f"üå≥ –¢–µ—Ä—Ä–∞—Å–∞: {terrace} –º¬≤")
        return {'total': total, 'details': details}

    @staticmethod
    def _apply_coefficients(data, total, details):
        region = data.get('region', '–î—Ä—É–≥–æ–π')
        coeff = REGIONAL_COEFFICIENTS.get(region, {'base': 1.0, 'delivery': 1.0})
        
        total *= coeff['base']
        details.append(f"üìç –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç ({region}): √ó{coeff['base']:.1f}")
        
        if total > 500000:
            details.append("üéÅ –°–∫–∏–¥–∫–∞ –∑–∞ –∫—Ä—É–ø–Ω—ã–π –∑–∞–∫–∞–∑: 5%")
            total *= 0.95
        
        return total

def calculate_and_send_result(user_id):
    try:
        user = get_user_data(user_id)
        project_id = user['current_project']
        project = user['projects'][project_id]
        total, details = CostCalculator.calculate_total(project['data'])
        send_result_message(user_id, total, details)
        schedule_reminder(user_id, project['name'])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}")
        bot.send_message(user_id, f"{STYLES['error']} –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}")
        track_event('abandon', project['data'].get('step', 0))
    finally:
        user['current_project'] = None

def send_result_message(user_id, total, details):
    formatted_details = []
    for item in details:
        parts = item.split(':')
        if len(parts) > 1:
            name_part = parts[0].strip()
            price_part = parts[1].strip()
            formatted_details.append(f"<b>{name_part}</b>: <code>{price_part}</code>")
        else:
            formatted_details.append(item)
    result = [
        f"{STYLES['header']} üìä –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:",
        *formatted_details,
        STYLES['separator'],
        f"üí∞ <b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</b>: <code>{total:,.0f} —Ä—É–±.</code>"
    ]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É")
    markup.row("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(
        user_id,
        "\n".join(result),
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.message_handler(func=lambda m: m.text == "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É")
def send_to_specialist(message):
    user_id = message.chat.id
    user = get_user_data(user_id)
    project_id = user.get('current_project') or max(
        user['projects'].keys(), 
        key=lambda k: user['projects'][k]['created_at'], 
        default=None
    )
    if not project_id:
        bot.send_message(user_id, f"{STYLES['error']} –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
        return
    project = user['projects'].get(project_id)
    if not project:
        bot.send_message(user_id, f"{STYLES['error']} –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    try:
        total, details = CostCalculator.calculate_total(project['data'])
        formatted_details = []
        for item in details:
            parts = item.split(':')
            if len(parts) > 1:
                name_part = parts[0].strip()
                price_part = parts[1].strip()
                formatted_details.append(f"<b>{name_part}</b>: <code>{price_part}</code>")
            else:
                formatted_details.append(item)
        result = [
            f"{STYLES['header']} –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç @{message.from_user.username}",
            "üìä –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞:",
            *formatted_details,
            STYLES['separator'],
            f"üí∞ <b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</b>: <code>{total:,.0f} —Ä—É–±.</code>"
        ]
        bot.send_message(515650034, "\n".join(result), parse_mode='HTML')
        bot.send_message(user_id, f"{STYLES['success']} –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        bot.send_message(user_id, f"{STYLES['error']} –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
    show_main_menu(message)

@bot.message_handler(func=lambda m: m.text == "üìö –ì–∞–π–¥—ã")
def show_guides_menu(message):
    user_id = message.chat.id
    user = get_user_data(user_id)
    user['last_active'] = datetime.now()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [g['title'] for g in GUIDES.values()]
    markup.add(*buttons)
    markup.add("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(
        user_id,
        f"{STYLES['header']} –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≥–∞–π–¥–∞:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text in [g['title'] for g in GUIDES.values()])
def show_guide_content(message):
    user_id = message.chat.id
    user = get_user_data(user_id)
    user['last_active'] = datetime.now()
    guide_title = message.text
    for key, guide in GUIDES.items():
        if guide['title'] == guide_title:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("üîô –ö —Å–ø–∏—Å–∫—É –≥–∞–π–¥–æ–≤")
            bot.send_message(
                user_id,
                f"üìñ <b>{guide['title']}</b>\n{guide['content']}",
                parse_mode='HTML',
                reply_markup=markup
            )
            break

@bot.message_handler(func=lambda m: m.text == "üîô –ö —Å–ø–∏—Å–∫—É –≥–∞–π–¥–æ–≤")
def back_to_guides(message):
    show_guides_menu(message)

@bot.message_handler(func=lambda m: m.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def back_to_main_menu(message):
    user_id = message.chat.id
    user = get_user_data(user_id)
    user['current_project'] = None
    show_main_menu(message)

def self_ping():
    while True:
        try:
            requests.get("https://karkasmaster.onrender.com")
            logger.info("Self-ping —É—Å–ø–µ—à–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ self-ping: {str(e)}")
        threading.Event().wait(300)

if __name__ == '__main__':
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ–±—Ö—É–∫–∏
    bot.remove_webhook()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=bot.polling, kwargs={
        'none_stop': True,
        'interval': 0,
        'timeout': 20
    })
    bot_thread.daemon = True
    bot_thread.start()
    port = int(os.getenv('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
